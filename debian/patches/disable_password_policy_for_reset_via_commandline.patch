--- a/core/Command/User/ResetPassword.php
+++ b/core/Command/User/ResetPassword.php
@@ -111,7 +111,7 @@ class ResetPassword extends Command {
 			return 1;
 		}
 
-		$success = $user->setPassword($password);
+		$success = $user->setPassword($password, null, false); // Do not apply password policy
 		if ($success) {
 			$output->writeln("<info>Successfully reset password for " . $username . "</info>");
 		} else {
--- a/lib/private/User/Database.php
+++ b/lib/private/User/Database.php
@@ -121,10 +121,12 @@ class Database extends \OC\User\Backend
 	 *
 	 * Change the password of a user
 	 */
-	public function setPassword($uid, $password) {
+	public function setPassword($uid, $password, $validatePassword = true) {
 		if ($this->userExists($uid)) {
-			$event = new GenericEvent($password);
-			$this->eventDispatcher->dispatch('OCP\PasswordPolicy::validate', $event);
+			if ($validatePassword) {
+				$event = new GenericEvent($password);
+				$this->eventDispatcher->dispatch('OCP\PasswordPolicy::validate', $event);
+			}
 			$query = \OC_DB::prepare('UPDATE `*PREFIX*users` SET `password` = ? WHERE `uid` = ?');
 			$result = $query->execute(array(\OC::$server->getHasher()->hash($password), $uid));
 
--- a/lib/private/User/User.php
+++ b/lib/private/User/User.php
@@ -227,12 +227,12 @@ class User implements IUser {
 	 * @param string $recoveryPassword for the encryption app to reset encryption keys
 	 * @return bool
 	 */
-	public function setPassword($password, $recoveryPassword = null) {
+	public function setPassword($password, $recoveryPassword = null, $validatePassword = true) {
 		if ($this->emitter) {
 			$this->emitter->emit('\OC\User', 'preSetPassword', array($this, $password, $recoveryPassword));
 		}
 		if ($this->backend->implementsActions(\OC\User\Backend::SET_PASSWORD)) {
-			$result = $this->backend->setPassword($this->uid, $password);
+			$result = $this->backend->setPassword($this->uid, $password, $validatePassword);
 			if ($this->emitter) {
 				$this->emitter->emit('\OC\User', 'postSetPassword', array($this, $password, $recoveryPassword));
 			}
